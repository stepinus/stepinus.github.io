uniform float time;
uniform float delta;
uniform sampler2D texturePosition;
uniform float boxIn;
uniform float boxOut;
uniform bool isPlaying;



vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x * 34.0) + 10.0) * x);
}

float snoise(vec2 v) {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
  0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
  -0.577350269189626,  // -1.0 + 2.0 * C.x
  0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i = floor(v + dot(v, C.yy));
  vec2 x0 = v - i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));

  vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
  m = m * m;
  m = m * m;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);

// Compute final noise value at P
  vec3 g;
  g.x = a0.x * x0.x + h.x * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
float random(vec2 st) {
  return snoise(st);
}



vec3 randomPointBetweenBoxes() {
    vec3 randomDir = vec3(
        random(vec2(time, 0.0)),
        random(vec2(time, 1.0)),
        random(vec2(time, 2.0))
    ) * 2.0 - 1.0;
    
    float innerHalfSize = boxIn * 0.5;
    float outerHalfSize = boxOut * 0.5;
    
    vec3 position = sign(randomDir) * mix(vec3(innerHalfSize), vec3(outerHalfSize), abs(randomDir));
    
    // Убеждаемся, что хотя бы одна координата находится на грани внешнего куба
    int face = int(random(vec2(time, 3.0)) * 3.0);
    position[face] = sign(position[face]) * outerHalfSize;
    
    return position;
}

vec3 moveAlongCube(vec3 position) {
    float innerHalfSize = boxIn * 0.5;
    float outerHalfSize = boxOut * 0.5;
    vec3 dir = sign(position);
    
    // Двигаем частицу вдоль грани куба
    position += dir * delta * (outerHalfSize - innerHalfSize);
    
    // Если частица вышла за пределы внешнего куба, перемещаем ее на следующую грань
    if (abs(position.x) > outerHalfSize) {
        position.x = sign(position.x) * outerHalfSize;
        position.y += dir.x * delta * (outerHalfSize - innerHalfSize);
    }
    if (abs(position.y) > outerHalfSize) {
        position.y = sign(position.y) * outerHalfSize;
        position.z += dir.y * delta * (outerHalfSize - innerHalfSize);
    }
    if (abs(position.z) > outerHalfSize) {
        position.z = sign(position.z) * outerHalfSize;
        position.x += dir.z * delta * (outerHalfSize - innerHalfSize);
    }
    
    return position;
}

void main() {
    vec2 uv = gl_FragCoord.xy / resolution.xy;
    vec4 tmpPos = texture2D(texturePosition, uv);
    vec3 position = tmpPos.xyz;
    float speed = tmpPos.w;

    float innerHalfSize = boxIn * 0.5;
    float outerHalfSize = boxOut * 0.5;

    if (isPlaying) {
        // Движение частиц вокруг boxIn по прямоугольной траектории
        position = moveAlongCube(position);
        
        // Добавляем небольшой шум для более естественного движения
        vec3 noise = vec3(
            snoise(vec2(position.x * 0.1, time * 0.1)),
            snoise(vec2(position.y * 0.1, time * 0.1)),
            snoise(vec2(position.z * 0.1, time * 0.1))
        ) * 0.05 * (outerHalfSize - innerHalfSize);
        
        position += noise;
        
        // Если частица оказалась внутри boxIn или снаружи boxOut, перемещаем ее обратно
        if (all(lessThan(abs(position), vec3(innerHalfSize))) || any(greaterThan(abs(position), vec3(outerHalfSize)))) {
            position = randomPointBetweenBoxes();
        }
    } else {
        // Равномерное распределение между boxIn и boxOut в режиме паузы
        position = randomPointBetweenBoxes();
    }

    gl_FragColor = vec4(position, speed);
}
